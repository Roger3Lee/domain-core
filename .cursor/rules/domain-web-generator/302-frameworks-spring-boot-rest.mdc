---
description: 
globs: "**/**Controller.java"
alwaysApply: false
---
# Java REST API设计原则

本综合指南提供了使用Spring Boot设计健壮、可维护和安全REST API的基本原则。这些规则确保您的API遵循行业最佳实践，保持一致性，并为API消费者提供出色的开发体验。

## 实施这些原则

这些指南建立在以下核心原则之上：

- **语义一致性**：根据其预期语义使用HTTP方法、状态码和URI模式
- **清晰沟通**：通过适当的DTO、错误处理和文档提供明确的API契约
- **设计安全**：从一开始就实施身份验证、授权和输入验证
- **演进设计**：对API进行版本控制并构建它们以支持未来更改而不破坏现有客户端

## 目录

- 规则1：正确使用HTTP方法
- 规则2：设计清晰一致的资源URI
- 规则3：适当使用HTTP状态码
- 规则4：实现有效的请求和响应API（DTO）
- 规则5：对API进行版本控制
- 规则6：优雅处理错误
- 规则7：保护您的API
- 规则8：记录您的API
- 规则9：使用Controller Advice进行全局异常处理
- 规则10：为错误响应实现问题详情
- 规则11：实现统一的响应数据格式

## 规则1：正确使用HTTP方法

标题：语义化使用HTTP方法
描述：根据其定义的语义使用HTTP方法，以确保可预测性和符合Web标准。`GET`用于检索，`POST`用于创建，`PUT`用于更新/替换，`PATCH`用于部分更新，`DELETE`用于删除。


## 规则 2：设计清晰一致的资源URI

标题：为资源使用名词并保持URI一致性
描述：设计直观且清楚地表示资源的URI。使用名词（如`/users`、`/orders`）而不是动词。保持URI风格一致（如路径段使用小写、连字符或驼峰命名）。


## 规则 3：适当使用HTTP状态码

标题：返回有意义的HTTP状态码
描述：使用标准HTTP状态码来准确反映API请求的结果。这有助于客户端理解结果，而无需解析响应体来获取基本的成功/失败信息。
- `200 OK`：一般成功。
- `201 Created`：资源成功创建（通常带有指向新资源的`Location`头）。
- `204 No Content`：成功，但没有内容返回（如成功`DELETE`后）。
- `400 Bad Request`：客户端错误（如无效语法、缺少参数）。
- `401 Unauthorized`：需要身份验证且失败或尚未提供。
- `403 Forbidden`：已认证的客户端没有访问资源的权限。
- `404 Not Found`：资源未找到。
- `500 Internal Server Error`：意外服务器端错误的通用错误消息。

## 规则 4：实现有效的请求和响应API（DTO）

标题：为API使用数据传输对象（DTO）并保持精简
描述：为请求和响应体使用专用的DTO类，而不是直接暴露内部领域/实体对象。这将您的API契约与内部数据模型解耦。保持DTO专注于特定API操作所需的数据。使用一致的命名约定（如JSON使用驼峰命名键）。


## 规则 5：为您的API版本化

标题：实施清晰的API版本控制策略
描述：从一开始就引入API版本控制，以在不破坏现有客户端的情况下管理变更和演进。常见策略包括URI版本控制（如`/v1/users`）、自定义请求头版本控制（如`X-API-Version: 1`）或媒体类型版本控制（如`Accept: application/vnd.example.v1+json`）。选择一种策略并一致地应用。

## 规则 6：优雅地处理错误

标题：提供清晰一致的错误响应
描述：当错误发生时，返回标准化的、机器可读的错误响应格式（如JSON）。包括唯一的错误代码或类型、人类可读的消息，以及可选的关于引起验证错误的特定字段的详细信息。不要在生产环境的错误响应中暴露敏感的内部详细信息，如堆栈跟踪。

## 规则 7：保护您的API

标题：实施强大的安全措施
描述：保护您的API免受常见威胁。对所有通信使用HTTPS。实施适当的身份验证（如OAuth 2.0、JWT）和授权（如基于角色的访问控制）。验证所有输入数据以防止注入攻击（SQLi、XSS）。应用速率限制和节流来防止滥用。


## 规则 8：记录您的API

标题：提供清晰全面的API文档
描述：为您的API维护最新的文档。可以使用Swagger/OpenAPI等工具从代码注解生成交互式文档。文档应涵盖资源URI、HTTP方法、请求/响应格式（包括DTO模式）、预期状态码、身份验证方法和错误响应。

## 规则 9：使用Controller Advice进行全局异常处理

标题：使用@ControllerAdvice实现集中式异常处理
描述：使用`@ControllerAdvice`创建集中式异常处理机制，可以捕获和处理所有控制器中的已检查`Exception`和未检查`RuntimeException`。使用Spring Boot内置的`ProblemDetail`类来获得遵循RFC 7807的一致、标准化的错误响应。这种方法促进DRY原则，确保一致的错误响应，并将错误处理逻辑与业务逻辑分离。


## 规则 10：为错误响应实现问题详情

标题：为HTTP API使用RFC 7807问题详情
描述：使用RFC 7807问题详情格式为HTTP 500（内部服务器错误）和其他错误响应实现标准化错误响应。这提供了机器可读的错误信息，包括类型、标题、状态、详情和实例，帮助客户端一致地理解和处理错误。

## 规则 11：实现统一的响应数据格式

标题：为正确响应提供全局的数据处理，保持和全局异常处理数据结构一致
描述：使用`@RestControllerAdvice`结合`ResponseBodyAdvice`接口实现全局响应数据包装，确保所有成功响应都具有统一的数据结构。这与全局异常处理保持一致，为客户端提供可预测的响应格式，便于前端统一处理API响应。
